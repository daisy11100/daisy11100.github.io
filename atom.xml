<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daisy&#39;s blog</title>
  
  
  <link href="/daisy11100.github.io/atom.xml" rel="self"/>
  
  <link href="https://daisy11100.github.io/"/>
  <updated>2019-07-19T08:48:30.793Z</updated>
  <id>https://daisy11100.github.io/</id>
  
  <author>
    <name>daisy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端常见面试题--第一弹</title>
    <link href="https://daisy11100.github.io/2019/07/19/%E4%B8%80/"/>
    <id>https://daisy11100.github.io/2019/07/19/一/</id>
    <published>2019-07-19T04:01:20.000Z</published>
    <updated>2019-07-19T08:48:30.793Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、css盒模型"><a href="#一、css盒模型" class="headerlink" title="一、css盒模型"></a>一、css盒模型</h4><h6 id="1、基本概念："><a href="#1、基本概念：" class="headerlink" title="1、基本概念："></a>1、基本概念：</h6><p>css的盒模型本质是一个盒子，封装周围的HTML元素，包括：外边距、边框、内边距和实际内容。</p>  <img src="/daisy11100.github.io/2019/07/19/一/imgs/190719/1.5.jpg"> <a id="more"></a><ul><li>Margin（外边距）：边框以外的区域，外边距是透明的</li><li>Border(边框)：围绕在内边距和内容外的边框</li><li>Padding（内边距）：内容与边框之间的区域，内边距是透明的</li><li>Content（内容）：盒子的内容</li></ul><h6 id="2、标准盒模型和IE盒模型"><a href="#2、标准盒模型和IE盒模型" class="headerlink" title="2、标准盒模型和IE盒模型"></a>2、标准盒模型和IE盒模型</h6><p><strong>区别</strong>：标准盒模型和IE盒模型的width和height的计算方式不同</p><p>举个栗子：假设设置一个元素宽高各为100px，为了方便观察设置背景色为red，代码如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">style</span>></span>   </span><br><span class="line">    #div1{        </span><br><span class="line">        width: 100px;      </span><br><span class="line">        height: 100px;    </span><br><span class="line">        background-color: red;      </span><br><span class="line">        padding: 10px;   </span><br><span class="line">    }</span><br><span class="line"><span class="tag"></<span class="name">style</span>></span></span><br><span class="line"><span class="tag"></<span class="name">head</span>></span></span><br><span class="line"><span class="tag"><<span class="name">body</span>></span>  </span><br><span class="line">    <span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>></span>盒模型<span class="tag"></<span class="name">div</span>></span></span><br><span class="line"><span class="tag"></<span class="name">body</span>></span></span><br></pre></td></tr></tbody></table></figure><p>然后在浏览器审查元素的时候你就会发现，元素的大小并不是自己设置的100px，而是变成了120px。</p> <img src="/daisy11100.github.io/2019/07/19/一/190719/1.1.png"> <p>这是因为在默认情况下的盒模型是标准盒模型，设置的width、heigh仅仅只是内容的宽高，不包含padding、border等；所以在添加了padding之后自然整体宽高都会变大，不是自己之前设置的了。</p><ul><li><p>标准盒模型的定义的width指的是content-width，</p></li><li><p>IE盒模型定义的width指 border+padding+content-width</p></li></ul><p><strong>设置</strong>：</p><ul><li>标准模型（默认）box-sizing：content-box</li><li>IE盒模型  box-sizing：border-box</li></ul><h4 id="二、link和-import的区别"><a href="#二、link和-import的区别" class="headerlink" title="二、link和@import的区别"></a>二、link和@import的区别</h4><p><strong>1、</strong>首先来说一下link和@import是用来干什么的，在HTML中引入css的方式有四种：</p><p><strong>内联方式</strong>：直接在HTML标签中style属性中添加css样式</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background: red"</span>></span><span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure><p><strong>嵌入方式</strong>：在HTML头部中的style标签中写下css代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">head</span>></span>     </span><br><span class="line"><span class="tag"><<span class="name">style</span>></span>       </span><br><span class="line">.content {background: red;}  </span><br><span class="line"><span class="tag"></<span class="name">style</span>></span>  </span><br><span class="line"><span class="tag"></<span class="name">head</span>></span></span><br></pre></td></tr></tbody></table></figure><p><strong>链接方式</strong>：在HTML头部的<meta name="generator" content="Hexo 3.9.0">标签中引入外部css文件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">head</span>></span>         </span><br><span class="line"><span class="tag"><<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>></span></span><br><span class="line"><span class="tag"></<span class="name">head</span>></span></span><br></pre></td></tr></tbody></table></figure><p><strong>导入方式</strong>：是指使用css规则引入外部css文件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">style</span>></span> </span><br><span class="line">@import url(style.css);</span><br><span class="line"><span class="tag"></<span class="name">style</span>></span></span><br></pre></td></tr></tbody></table></figure><p>所以link和@import是将css引入HTML中的方式，虽然都是css引入方式，但是可能对大家而言link比较熟悉，使用的次数比较多，相比之下@import就很少被使用。为什么都是导入方式大家都喜欢用link，而不是@import，这就要看一下他两之间的区别了。</p><p><strong>2、区别：</strong></p><ul><li>加载方式不同，link可以在页面载入的同时进行加载，而@import只能在页面加载完成之后才能进行加载。</li><li>link属于HTML，不存在兼容问题，@import是css2.1才提出的概念，所以浏览器版本较低时可能就无法正确导入外部样式文件。</li><li>@import是css提供的语法规则，只有导入样式表的作用，而link属于html，不仅可以导入样式表，还可以定义rel等属性。</li><li>link支持使用JavaScript来改变DOM样式，@import不支持</li></ul><h4 id="三、绑定事件的三种方式"><a href="#三、绑定事件的三种方式" class="headerlink" title="三、绑定事件的三种方式"></a>三、绑定事件的三种方式</h4><p><strong>1、DOM元素直接绑定</strong>，简单来说就是在html标签中绑定事件的话，需要在js中写上事件处理的程序，然后在html中使用同名的html特性来调用。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"messageShow()"</span>></span>clickme<span class="tag"></<span class="name">button</span>></span>    </span><br><span class="line"> <span class="tag"><<span class="name">script</span>></span>    </span><br><span class="line">     function messageShow(){      </span><br><span class="line">         alert("Yes");    </span><br><span class="line">     }    </span><br><span class="line"> <span class="tag"></<span class="name">script</span>></span></span><br></pre></td></tr></tbody></table></figure><p><strong>2、在js中绑定事件</strong>，这是我们最常用的一种绑定事件的方式，先获取到html元素，再在js里绑定事件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>></span>clickMe<span class="tag"></<span class="name">button</span>></span></span><br><span class="line"><span class="tag"><<span class="name">script</span>></span>     </span><br><span class="line">    var oBtn=document.getElementsByTagName("button")[0];      </span><br><span class="line">    oBtn.onclick=function(){         </span><br><span class="line">        alert('Yes1');     </span><br><span class="line">    }    </span><br><span class="line"><span class="tag"></<span class="name">script</span>></span></span><br></pre></td></tr></tbody></table></figure><p><strong>3、使用事件监听绑定事件</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>></span>clickMe<span class="tag"></<span class="name">button</span>></span>    </span><br><span class="line"><span class="tag"><<span class="name">script</span>></span>    </span><br><span class="line">var oBtn=document.getElementsByTagName("button")[0];     // 给元素绑定事件监听函数     oBtn.addEventListener('click',function(){        </span><br><span class="line">    alert(this.type);  </span><br><span class="line">    },false)    </span><br><span class="line">    var Show=function(){        </span><br><span class="line">        alert('OK!');  </span><br><span class="line">    };    </span><br><span class="line"><span class="tag"></<span class="name">script</span>></span></span><br></pre></td></tr></tbody></table></figure><p>需要注意的是使用事件监听绑定事件时，有三个参数，<strong>addEventListener（事件名，事件处理程序，布尔值）</strong>，最后一个参数是布尔值，如果是true，表示在捕获阶段调用事件处理程序，如果是false，表示在冒泡阶段调用事件处理程序，一般都是false。</p><h4 id="四、typeof和instance的区别"><a href="#四、typeof和instance的区别" class="headerlink" title="四、typeof和instance的区别"></a>四、typeof和instance的区别</h4><ul><li><strong>基本数据类型：number、string、Boolean、undefined、null</strong></li><li><strong>引用数据类型：object</strong></li></ul><h6 id="1、typeof"><a href="#1、typeof" class="headerlink" title="1、typeof"></a><strong>1、typeof</strong></h6><p>  typeof可以检测给定变量的数据类型，返回值为一个字符串，可能是number、boolean、string、function、undefined、object。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof(Array));  //"function"</span><br><span class="line">console.log(typeof(Object)); //"function"</span><br><span class="line">console.log(typeof(null)); //"Object"</span><br></pre></td></tr></tbody></table></figure><p>要注意以上三种情况，Array和Object的数据类型是function，因为Array本身就是js内部创建的构造函数。null是指空对象，所以输出来为Object类型。</p><p><strong>typeof一般用来判断一个变量是否存在：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(typeof(a)!="undefined"){      </span><br><span class="line">console.log("ok");  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果存在的话返回ok。</p><h6 id="2、instanceof"><a href="#2、instanceof" class="headerlink" title="2、instanceof"></a><strong>2、instanceof</strong></h6><p>instanceof的作用是判断一个变量是否是某一个对象的实例，A instanceof B（判断A是否是B的实例，是的话返回true，不是的话返回去false）。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a=new Array;  </span><br><span class="line">console.log(a instanceof Array);  //"true"    </span><br><span class="line">console.log(Array instanceof Function); //"true"  </span><br><span class="line">console.log(Object instanceof Function);//"true"    </span><br><span class="line">console.log(a instanceof Function);//"true"</span><br></pre></td></tr></tbody></table></figure><p>上面的例子也证明了typeof的输出结果，Array和Object是Function的实例，所以检测出来Array和Object的数据类型为function。</p><p>因为Array是function的实例，而a又是Array的实例，所以a就是Function的实例，a instanceof Function会返回一个true。</p><h4 id="五、src和herf的区别"><a href="#五、src和herf的区别" class="headerlink" title="五、src和herf的区别"></a>五、src和herf的区别</h4><ul><li>src是将指定资源嵌套进当前文档</li><li>herf是在当前文档和指定资源之间开辟了一条通道</li></ul><h4 id="六、从输入一个url开始，到页面加载完成，都会发生哪些操作？"><a href="#六、从输入一个url开始，到页面加载完成，都会发生哪些操作？" class="headerlink" title="六、从输入一个url开始，到页面加载完成，都会发生哪些操作？"></a>六、从输入一个url开始，到页面加载完成，都会发生哪些操作？</h4><h6 id="1、DNS解析"><a href="#1、DNS解析" class="headerlink" title="1、DNS解析"></a>1、DNS解析</h6><p>DNS（域名解析）实现了网址到IP地址的转换，通过主机名，获取到与主机名相对应的ip地址。其实就是一个递归查询到过程，从本地域名->根域名->顶级域名，比如com->google.com-><a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></p>  <img src="/daisy11100.github.io/2019/07/19/一/190719/1.2.png"> <h6 id="2、TCP连接（三握四挥）"><a href="#2、TCP连接（三握四挥）" class="headerlink" title="2、TCP连接（三握四挥）"></a>2、TCP连接（三握四挥）</h6>  <img src="/daisy11100.github.io/2019/07/19/一/190719/1.4.png"> <ol><li>发送http请求</li></ol><ul><li>发送http请求就是构建http请求报文，并通过TCP协议发送到服务器的指定端口（http是8080，https包括）。</li><li>http请求报文一般包括请求方式、请求报头、请求正文</li><li>请求行：<strong>Method Request-URL HTTP-Version CRLF</strong></li></ul><p>​                         eg: GET index.html HTTP/1.1</p><p>​              常用的方法有: GET, POST, PUT, DELETE, OPTIONS, HEAD。</p><p>2.服务器响应请求并返回http报文</p><ul><li>​      http响应报文由三部分组成：状态码、响应报头、响应报文</li><li>​     状态码：</li></ul><p>1××：指示信息-表示请求已接收，继续处理</p><p>2××：成功-表示请求已经成功接收、理解、接受</p><p>3××：重定向-表示要完成请求必须进行更近一步的操作</p><p>4××：客户端错误-请求有语法错误或者请求无法实现</p><p>5××：服务器错误-服务器无法完成合法的请求</p><h6 id="3、浏览器解析并渲染页面"><a href="#3、浏览器解析并渲染页面" class="headerlink" title="3、浏览器解析并渲染页面"></a>3、浏览器解析并渲染页面</h6>  <img src="/daisy11100.github.io/2019/07/19/一/190719/1.3.png"> <ul><li>解析html文档，构建DOM树。</li><li>下载css文件，开始构建css树。</li><li>css树构建完成之后，和DOM树一起构成渲染树。</li><li>布局：计算出每个节点在页面中的位置。</li><li>显示，通过显卡显示页面</li></ul><p>DOM树和渲染树的区别：</p><ul><li>DOM树与HTML标签一一对应，包括head和隐藏的节点</li><li>渲染树不包括head和隐藏的元素，并且每个节点都有与之对应的css样式。</li></ul><p>重绘和重排（这个也需要划重点）：</p><ul><li>当页面中的元素样式发生变化时（颜色等），不影响节点的布局时，会引起浏览器的重绘</li><li>当页面中的DOM元素的位置，尺寸等影响布局的样式发生变化时，会引起浏览器的重排</li><li>重排一定会引发重绘</li><li>但是重绘不一定能引起重排</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、css盒模型&quot;&gt;&lt;a href=&quot;#一、css盒模型&quot; class=&quot;headerlink&quot; title=&quot;一、css盒模型&quot;&gt;&lt;/a&gt;一、css盒模型&lt;/h4&gt;&lt;h6 id=&quot;1、基本概念：&quot;&gt;&lt;a href=&quot;#1、基本概念：&quot; class=&quot;headerlink&quot; title=&quot;1、基本概念：&quot;&gt;&lt;/a&gt;1、基本概念：&lt;/h6&gt;&lt;p&gt;css的盒模型本质是一个盒子，封装周围的HTML元素，包括：外边距、边框、内边距和实际内容。&lt;/p&gt;
  &lt;img src=&quot;/daisy11100.github.io/2019/07/19/一/imgs/190719/1.5.jpg&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>水平垂直居中的方法</title>
    <link href="https://daisy11100.github.io/2019/07/10/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%8A%9E%E6%B3%95/"/>
    <id>https://daisy11100.github.io/2019/07/10/水平垂直居中的办法/</id>
    <published>2019-07-09T16:00:00.000Z</published>
    <updated>2019-07-10T08:17:56.814Z</updated>
    
    <content type="html"><![CDATA[<p><strong>宽度高度未知，纯定位</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">position: absolute; </span><br><span class="line"></span><br><span class="line">  top: 0;              </span><br><span class="line"></span><br><span class="line">  left: 0;       </span><br><span class="line"></span><br><span class="line">  right: 0;     </span><br><span class="line"></span><br><span class="line">bottom: 0;    </span><br><span class="line"></span><br><span class="line"> margin: auto；</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>定位+负的margin，宽高未知</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">position: absolute;      </span><br><span class="line"></span><br><span class="line">top: 50%;        </span><br><span class="line"></span><br><span class="line"> margin-left: -50px;   </span><br><span class="line"></span><br><span class="line">margin-top: -50px</span><br></pre></td></tr></tbody></table></figure><p><strong>flex布局，宽高要已知</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">body{          </span><br><span class="line"></span><br><span class="line">display: flex;         </span><br><span class="line"></span><br><span class="line">width: <span class="number">100</span>%;          </span><br><span class="line"></span><br><span class="line"> height: <span class="number">500</span>px;      </span><br><span class="line"></span><br><span class="line">justify-content: center;       </span><br><span class="line"></span><br><span class="line">align-items: center;      </span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>定位+transform</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">position: absolute;     </span><br><span class="line"></span><br><span class="line"> left: 50%;       </span><br><span class="line"></span><br><span class="line"> top: 50%;        </span><br><span class="line"></span><br><span class="line"> transform: translate(-50%,-50%);</span><br></pre></td></tr></tbody></table></figure><p>translate方法中的-50%是自身的50%，所以其实这个方法和marign负值相似。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;宽度高度未知，纯定位&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;position: absolute; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  top: 0;              &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  left: 0;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  right: 0;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bottom: 0;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; margin: auto；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="css" scheme="https://daisy11100.github.io/categories/css/"/>
    
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="https://daisy11100.github.io/2019/07/10/%E9%97%AD%E5%8C%85/"/>
    <id>https://daisy11100.github.io/2019/07/10/闭包/</id>
    <published>2019-07-09T16:00:00.000Z</published>
    <updated>2019-07-10T08:05:06.668Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、变量作用域</strong></p><p>要理解闭包，首先要理解javascript的特殊的变量作用域。</p><p>变量的作用域无非就两种：全局变量和局部变量。</p><p>javascript语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。</p><p>注意点：在函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明的是一个全局变量！</p><a id="more"></a><p><strong>2、如何从外部读取函数内部的局部变量？</strong></p><p>出于种种原因，我们有时候需要获取到函数内部的局部变量。但是，上面已经说过了，正常情况下，这是办不到的！只有通过变通的方法才能实现。</p><p>那就是在函数内部，再定义一个函数。</p><p><code>function f1(){</code></p><p>　　　　<code>var n=999;</code></p><p>　　　　<code>function f2(){</code></p><p>　　　　　　<code>alert(n); // 999</code></p><p>　　　　<code>}</code></p><p>　　<code>}</code></p><p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。</p><p>这就是Javascript语言特有的”链式作用域”结构（chain scope），</p><p>子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p><p><strong>3、闭包的概念</strong></p><p>上面代码中的f2函数，就是闭包。</p><p>各种专业文献的闭包定义都非常抽象，我的理解是: 闭包就是能够读取其他函数内部变量的函数。</p><p>由于在javascript中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成“定义在一个函数内部的函数“。</p><p>所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</p><p> <strong>4、闭包的用途</strong></p><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在f1调用后被自动清除。</p><p>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p><p>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p><p><strong>5、使用闭包的注意点</strong></p><p>（1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>（2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1、变量作用域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要理解闭包，首先要理解javascript的特殊的变量作用域。&lt;/p&gt;
&lt;p&gt;变量的作用域无非就两种：全局变量和局部变量。&lt;/p&gt;
&lt;p&gt;javascript语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。&lt;/p&gt;
&lt;p&gt;注意点：在函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明的是一个全局变量！&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="https://daisy11100.github.io/categories/js/"/>
    
    
  </entry>
  
</feed>
